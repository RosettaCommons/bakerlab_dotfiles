# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
ZSH_THEME="verbose"

# Customize to your needs...
PATH_PREFIX=$HOME/miniconda3/bin:$HOME/bin

if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # Oh my, zsh plugins
    plugins=(git)
else
    # Oh my, zsh plugins
    plugins=(git osx macports screen terminalapp)
fi

# test iTerm2 shell integration -- yes, you should be using iTerm2
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

if [[ -n ${TMUX} || ${OSTYPE} == "linux-gnu" ]]; then
    function iterm2_prompt_mark() {}
fi

source $ZSH/oh-my-zsh.sh

# Allow things like "sudo !!" to work without the shell wanting confirmation
setopt no_hist_verify

# This has to be done after oh-my-zsh.sh is sourced
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # GNU/Linux
    export LS_COLORS='di=1;34:ln=1;36:so=32:pi=33:ex=32:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43'

    # this prevents `git status` from being called when `cd`ing into a git repo,
    # which can be way too slow for shared filesystems.
    # the major draw back is that it suppresses the dirty repo flag, but that's
    # a small price to pay for it being usably fast.
    function git_prompt_info() {
      ref=$(git symbolic-ref HEAD 2> /dev/null) || return
      echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$ZSH_THEME_GIT_PROMPT_SUFFIX"
    }

    # Get the most current Red Hat-provided devtools
    if [[ -f "/opt/rh/devtoolset-2/enable" ]]; then
        source /opt/rh/devtoolset-2/enable
    fi
else
    # Additional Mac settings for GNUplot, R and PyMOL
    export GNUTERM="aqua"
    export R_HOME=/Library/Frameworks/R.framework/Resources

    # BSD/macOS
    export LSCOLORS='ExGxcxdxcxegedabagacad'

    function add_to_path() {
        if [[ -d $1 ]]; then
            PATH_PREFIX=$PATH_PREFIX:$1
        fi
    }

    add_to_path /opt/local/bin
    add_to_path /Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin
    add_to_path $HOME/miniconda3/envs/pymol/bin

    # Mounting and unmounting digs home directory
    # Requires: (1) FUSE for macOS; (2) SSHFS; (3) root access to localhost
    # Assumes:  (1) you have the same username on localhost and the digs;
    #           (2) the mount point is $HOME/digs and is an empty directory that exists;
    #           (3) you followed the instructions on the wiki: http://wiki.baker/index.php/Mounting_IPD_Filesystems
    # Set the name of the mount point here
    mount_pt="digs"
    alias mount_digs="sudo sshfs -o defer_permissions,follow_symlinks,allow_other,reconnect,volname=$mount_pt $USER@share:/home/$USER $HOME/$mount_pt"
    alias unmount_digs="sudo umount $HOME/$mount_pt"
fi

export PATH=$PATH_PREFIX:$PATH

# enable directory-based environment activation and switching
eval "$(direnv hook zsh)"

# set up alias hub -> git if `hub` is installed on the system
if type hub &> /dev/null; then
    eval "$(hub alias -s)"
fi

if [[ -f $HOME/.rosetta3_rc ]]; then
    source $HOME/.rosetta3_rc
fi

alias ll='ls -hlt'

# Baker lab machines
alias digs="ssh digs"
alias jojo="ssh jojo"
