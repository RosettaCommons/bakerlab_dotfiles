# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
ZSH_THEME="verbose"

# Customize to your needs...
PATH_PREFIX=$HOME/bin

# Oh my, zsh plugins
plugins=(colored-man-pages direnv docker docker-compose git github tmux)
# Mac-specific configuration
if [[ ${OSTYPE} == darwin* ]]; then
    plugins+=(iterm2 macports osx)
    # test iTerm2 shell integration -- yes, you should be using iTerm2
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
fi

# clear fancy prompt mark char where it isn't supported
if [[ -n ${TMUX} || ${OSTYPE} == "linux-gnu" ]]; then
    function iterm2_prompt_mark() {}
fi

source $ZSH/oh-my-zsh.sh

# Allow things like "sudo !!" to work without the shell wanting confirmation
setopt no_hist_verify

LS_COLORS='di=34:ln=36:so=32:pi=33:ex=32:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43'

# This has to be done after oh-my-zsh.sh is sourced
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # GNU/Linux
    export LS_COLORS

    # this prevents `git status` from being called when `cd`ing into a git repo,
    # which can be way too slow for shared filesystems.
    # the major draw back is that it suppresses the dirty repo flag, but that's
    # a small price to pay for it being usably fast.
    function git_prompt_info() {
      ref=$(git symbolic-ref HEAD 2> /dev/null) || return
      echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$ZSH_THEME_GIT_PROMPT_SUFFIX"
    }

    # Get the most current Red Hat-provided devtools
    if [[ -f "/opt/rh/devtoolset-2/enable" ]]; then
        source /opt/rh/devtoolset-2/enable
    fi
else
    # Additional Mac settings for GNUplot, R and PyMOL
    export GNUTERM="aqua"
    export R_HOME=/Library/Frameworks/R.framework/Resources

    # BSD/macOS
    export LSCOLORS='ExGxcxdxcxegedabagacad'

    function add_to_path() {
        if [[ -d $1 ]]; then
            PATH_PREFIX=$PATH_PREFIX:$1
        fi
    }

    add_to_path /opt/local/libexec/gnubin/
    add_to_path /opt/local/bin
    add_to_path /Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin
    add_to_path $HOME/miniconda3/envs/pymol/bin
fi

export PATH=$PATH_PREFIX:$PATH

if [[ -f $HOME/.rosetta3_rc ]]; then
    source $HOME/.rosetta3_rc
fi

# check if we are using GNU coreutils on a BSD-based system and adjust the `ls` configuration
if [[ -f `which gls` && "${OSTYPE}" == (darwin|freebsd)* ]]; then
    unset LSCOLORS; unalias ls
    export LS_COLORS
    alias ls='gls --quoting-style=literal --color=tty'
fi

alias ll='ls -hlt'

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$($HOME'/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# set up zsh to include the current environment in the prompt
# whether direnv is switching envs or if envs are being changed
# manually. Requires issuing
# 'conda config --set changeps1 False'
# to prevent the prompt from accumulating environmnets.
setopt PROMPT_SUBST
show_conda_env() {
  if [[ -n "$CONDA_DEFAULT_ENV" ]]; then
    echo "($(basename $CONDA_DEFAULT_ENV))"
  fi
}
PS1='$(show_conda_env)'$PS1
